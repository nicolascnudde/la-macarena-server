# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Activity {
  id: ID!
  title: String
  description: String
  image: CloudinaryImage_File
  price: Int
  slots: Int
  category: Category
  location: String
  duration: String
  date: DateTime
  toDate: DateTime
  wysiwyg: Activity_wysiwyg_Document
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
   Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type Activity_wysiwyg_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ActivityWhereUniqueInput {
  id: ID
  title: String
}

input ActivityWhereInput {
  AND: [ActivityWhereInput!]
  OR: [ActivityWhereInput!]
  NOT: [ActivityWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  price: IntFilter
  slots: IntFilter
  category: CategoryWhereInput
  location: StringFilter
  duration: StringFilter
  date: DateTimeNullableFilter
  toDate: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ActivityOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  price: OrderDirection
  slots: OrderDirection
  location: OrderDirection
  duration: OrderDirection
  date: OrderDirection
  toDate: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ActivityUpdateInput {
  title: String
  description: String
  image: Upload
  price: Int
  slots: Int
  category: CategoryRelateToOneForUpdateInput
  location: String
  duration: String
  date: DateTime
  toDate: DateTime
  wysiwyg: JSON
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input ActivityUpdateArgs {
  where: ActivityWhereUniqueInput!
  data: ActivityUpdateInput!
}

input ActivityCreateInput {
  title: String
  description: String
  image: Upload
  price: Int
  slots: Int
  category: CategoryRelateToOneForCreateInput
  location: String
  duration: String
  date: DateTime
  toDate: DateTime
  wysiwyg: JSON
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

type Category {
  id: ID!
  title: String
  description: String
  image: CloudinaryImage_File
}

input CategoryWhereUniqueInput {
  id: ID
  title: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
}

input CategoryOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input CategoryUpdateInput {
  title: String
  description: String
  image: Upload
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  title: String
  description: String
  image: Upload
}

type Content {
  id: ID!
  homePageHeroTitle: String
  homePageHeroDescription: String
  homePageHeroImage: CloudinaryImage_File
  homePageHeroButtonText: String
  homePageAboutTitle: String
  homePageAboutDescription: String
  whoWeAreTitle: String
  whoWeAreDescription: String
  whoWeAreImage: CloudinaryImage_File
  ctaTitle: String
  ctaDescription: String
  ctaImage: CloudinaryImage_File
  ctaButtonText: String
  activitiesPageHeroTitle: String
  activitiesPageHeroDescription: String
  activitiesPageUpcomingTitle: String
  activitiesPageUpcomingDescription: String
  activitiesPageCategoriesTitle: String
  activitiesPageCategoriesDescription: String
  aboutPageHeroTitle: String
  aboutPageHeroDescription: String
  aboutPageHeroImage: CloudinaryImage_File
  aboutPageStoryTitle: String
  aboutPageStoryDescription: String
  aboutPageStoryImageOne: CloudinaryImage_File
  aboutPageStoryImageTwo: CloudinaryImage_File
  goalsPageHeroTitle: String
  goalsPageHeroDescription: String
  contactPageHeroTitle: String
  contactPageHeroDescription: String
  contactPageFormImage: CloudinaryImage_File
  contactPageFaqTitle: String
  contactPageFaqDescription: String
  socialMediaInstagram: String
  socialMediaFacebook: String
}

input ContentWhereUniqueInput {
  id: ID
  homePageHeroTitle: String
  activitiesPageHeroTitle: String
  activitiesPageUpcomingTitle: String
  activitiesPageCategoriesTitle: String
  aboutPageHeroTitle: String
  goalsPageHeroTitle: String
  contactPageHeroTitle: String
  contactPageFaqTitle: String
}

input ContentWhereInput {
  AND: [ContentWhereInput!]
  OR: [ContentWhereInput!]
  NOT: [ContentWhereInput!]
  id: IDFilter
  homePageHeroTitle: StringFilter
  homePageHeroDescription: StringFilter
  homePageHeroButtonText: StringFilter
  homePageAboutTitle: StringFilter
  homePageAboutDescription: StringFilter
  whoWeAreTitle: StringFilter
  whoWeAreDescription: StringFilter
  ctaTitle: StringFilter
  ctaDescription: StringFilter
  ctaButtonText: StringFilter
  activitiesPageHeroTitle: StringFilter
  activitiesPageHeroDescription: StringFilter
  activitiesPageUpcomingTitle: StringFilter
  activitiesPageUpcomingDescription: StringFilter
  activitiesPageCategoriesTitle: StringFilter
  activitiesPageCategoriesDescription: StringFilter
  aboutPageHeroTitle: StringFilter
  aboutPageHeroDescription: StringFilter
  aboutPageStoryTitle: StringFilter
  aboutPageStoryDescription: StringFilter
  goalsPageHeroTitle: StringFilter
  goalsPageHeroDescription: StringFilter
  contactPageHeroTitle: StringFilter
  contactPageHeroDescription: StringFilter
  contactPageFaqTitle: StringFilter
  contactPageFaqDescription: StringFilter
  socialMediaInstagram: StringFilter
  socialMediaFacebook: StringFilter
}

input ContentOrderByInput {
  id: OrderDirection
  homePageHeroTitle: OrderDirection
  homePageHeroDescription: OrderDirection
  homePageHeroButtonText: OrderDirection
  homePageAboutTitle: OrderDirection
  homePageAboutDescription: OrderDirection
  whoWeAreTitle: OrderDirection
  whoWeAreDescription: OrderDirection
  ctaTitle: OrderDirection
  ctaDescription: OrderDirection
  ctaButtonText: OrderDirection
  activitiesPageHeroTitle: OrderDirection
  activitiesPageHeroDescription: OrderDirection
  activitiesPageUpcomingTitle: OrderDirection
  activitiesPageUpcomingDescription: OrderDirection
  activitiesPageCategoriesTitle: OrderDirection
  activitiesPageCategoriesDescription: OrderDirection
  aboutPageHeroTitle: OrderDirection
  aboutPageHeroDescription: OrderDirection
  aboutPageStoryTitle: OrderDirection
  aboutPageStoryDescription: OrderDirection
  goalsPageHeroTitle: OrderDirection
  goalsPageHeroDescription: OrderDirection
  contactPageHeroTitle: OrderDirection
  contactPageHeroDescription: OrderDirection
  contactPageFaqTitle: OrderDirection
  contactPageFaqDescription: OrderDirection
  socialMediaInstagram: OrderDirection
  socialMediaFacebook: OrderDirection
}

input ContentUpdateInput {
  homePageHeroTitle: String
  homePageHeroDescription: String
  homePageHeroImage: Upload
  homePageHeroButtonText: String
  homePageAboutTitle: String
  homePageAboutDescription: String
  whoWeAreTitle: String
  whoWeAreDescription: String
  whoWeAreImage: Upload
  ctaTitle: String
  ctaDescription: String
  ctaImage: Upload
  ctaButtonText: String
  activitiesPageHeroTitle: String
  activitiesPageHeroDescription: String
  activitiesPageUpcomingTitle: String
  activitiesPageUpcomingDescription: String
  activitiesPageCategoriesTitle: String
  activitiesPageCategoriesDescription: String
  aboutPageHeroTitle: String
  aboutPageHeroDescription: String
  aboutPageHeroImage: Upload
  aboutPageStoryTitle: String
  aboutPageStoryDescription: String
  aboutPageStoryImageOne: Upload
  aboutPageStoryImageTwo: Upload
  goalsPageHeroTitle: String
  goalsPageHeroDescription: String
  contactPageHeroTitle: String
  contactPageHeroDescription: String
  contactPageFormImage: Upload
  contactPageFaqTitle: String
  contactPageFaqDescription: String
  socialMediaInstagram: String
  socialMediaFacebook: String
}

input ContentUpdateArgs {
  where: ContentWhereUniqueInput!
  data: ContentUpdateInput!
}

input ContentCreateInput {
  homePageHeroTitle: String
  homePageHeroDescription: String
  homePageHeroImage: Upload
  homePageHeroButtonText: String
  homePageAboutTitle: String
  homePageAboutDescription: String
  whoWeAreTitle: String
  whoWeAreDescription: String
  whoWeAreImage: Upload
  ctaTitle: String
  ctaDescription: String
  ctaImage: Upload
  ctaButtonText: String
  activitiesPageHeroTitle: String
  activitiesPageHeroDescription: String
  activitiesPageUpcomingTitle: String
  activitiesPageUpcomingDescription: String
  activitiesPageCategoriesTitle: String
  activitiesPageCategoriesDescription: String
  aboutPageHeroTitle: String
  aboutPageHeroDescription: String
  aboutPageHeroImage: Upload
  aboutPageStoryTitle: String
  aboutPageStoryDescription: String
  aboutPageStoryImageOne: Upload
  aboutPageStoryImageTwo: Upload
  goalsPageHeroTitle: String
  goalsPageHeroDescription: String
  contactPageHeroTitle: String
  contactPageHeroDescription: String
  contactPageFormImage: Upload
  contactPageFaqTitle: String
  contactPageFaqDescription: String
  socialMediaInstagram: String
  socialMediaFacebook: String
}

type Faq {
  id: ID!
  question: String
  answer: String
  isExpanded: Boolean
}

input FaqWhereUniqueInput {
  id: ID
  question: String
}

input FaqWhereInput {
  AND: [FaqWhereInput!]
  OR: [FaqWhereInput!]
  NOT: [FaqWhereInput!]
  id: IDFilter
  question: StringFilter
  answer: StringFilter
  isExpanded: BooleanFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input FaqOrderByInput {
  id: OrderDirection
  question: OrderDirection
  answer: OrderDirection
  isExpanded: OrderDirection
}

input FaqUpdateInput {
  question: String
  answer: String
  isExpanded: Boolean
}

input FaqUpdateArgs {
  where: FaqWhereUniqueInput!
  data: FaqUpdateInput!
}

input FaqCreateInput {
  question: String
  answer: String
  isExpanded: Boolean
}

type Goal {
  id: ID!
  title: String
  description: String
  image: CloudinaryImage_File
  imageRight: Boolean
}

input GoalWhereUniqueInput {
  id: ID
  title: String
}

input GoalWhereInput {
  AND: [GoalWhereInput!]
  OR: [GoalWhereInput!]
  NOT: [GoalWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  imageRight: BooleanFilter
}

input GoalOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  imageRight: OrderDirection
}

input GoalUpdateInput {
  title: String
  description: String
  image: Upload
  imageRight: Boolean
}

input GoalUpdateArgs {
  where: GoalWhereUniqueInput!
  data: GoalUpdateInput!
}

input GoalCreateInput {
  title: String
  description: String
  image: Upload
  imageRight: Boolean
}

type Member {
  id: ID!
  firstName: String
  lastName: String
  image: CloudinaryImage_File
  origin: String
}

input MemberWhereUniqueInput {
  id: ID
}

input MemberWhereInput {
  AND: [MemberWhereInput!]
  OR: [MemberWhereInput!]
  NOT: [MemberWhereInput!]
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  origin: StringFilter
}

input MemberOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  origin: OrderDirection
}

input MemberUpdateInput {
  firstName: String
  lastName: String
  image: Upload
  origin: String
}

input MemberUpdateArgs {
  where: MemberWhereUniqueInput!
  data: MemberUpdateInput!
}

input MemberCreateInput {
  firstName: String
  lastName: String
  image: Upload
  origin: String
}

type Reservation {
  id: ID!
  firstName: String
  lastName: String
  email: String
  phone: String
  activityTitle: String
  activityPrice: Int
  activityDate: String
  message: String
  createdAt: DateTime
}

input ReservationWhereUniqueInput {
  id: ID
}

input ReservationWhereInput {
  AND: [ReservationWhereInput!]
  OR: [ReservationWhereInput!]
  NOT: [ReservationWhereInput!]
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  phone: StringFilter
  activityTitle: StringFilter
  activityPrice: IntFilter
  activityDate: StringFilter
  message: StringFilter
  createdAt: DateTimeNullableFilter
}

input ReservationOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  activityTitle: OrderDirection
  activityPrice: OrderDirection
  activityDate: OrderDirection
  message: OrderDirection
  createdAt: OrderDirection
}

input ReservationUpdateInput {
  firstName: String
  lastName: String
  email: String
  phone: String
  activityTitle: String
  activityPrice: Int
  activityDate: String
  message: String
  createdAt: DateTime
}

input ReservationUpdateArgs {
  where: ReservationWhereUniqueInput!
  data: ReservationUpdateInput!
}

input ReservationCreateInput {
  firstName: String
  lastName: String
  email: String
  phone: String
  activityTitle: String
  activityPrice: Int
  activityDate: String
  message: String
  createdAt: DateTime
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  isEditor: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
  isEditor: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  isEditor: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  isEditor: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  isEditor: Boolean
}

type Usp {
  id: ID!
  title: String
  description: String
  image: CloudinaryImage_File
}

input UspWhereUniqueInput {
  id: ID
  title: String
}

input UspWhereInput {
  AND: [UspWhereInput!]
  OR: [UspWhereInput!]
  NOT: [UspWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
}

input UspOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input UspUpdateInput {
  title: String
  description: String
  image: Upload
}

input UspUpdateArgs {
  where: UspWhereUniqueInput!
  data: UspUpdateInput!
}

input UspCreateInput {
  title: String
  description: String
  image: Upload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createActivity(data: ActivityCreateInput!): Activity
  createActivities(data: [ActivityCreateInput!]!): [Activity]
  updateActivity(
    where: ActivityWhereUniqueInput!
    data: ActivityUpdateInput!
  ): Activity
  updateActivities(data: [ActivityUpdateArgs!]!): [Activity]
  deleteActivity(where: ActivityWhereUniqueInput!): Activity
  deleteActivities(where: [ActivityWhereUniqueInput!]!): [Activity]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createContent(data: ContentCreateInput!): Content
  createContents(data: [ContentCreateInput!]!): [Content]
  updateContent(
    where: ContentWhereUniqueInput!
    data: ContentUpdateInput!
  ): Content
  updateContents(data: [ContentUpdateArgs!]!): [Content]
  deleteContent(where: ContentWhereUniqueInput!): Content
  deleteContents(where: [ContentWhereUniqueInput!]!): [Content]
  createFaq(data: FaqCreateInput!): Faq
  createFaqs(data: [FaqCreateInput!]!): [Faq]
  updateFaq(where: FaqWhereUniqueInput!, data: FaqUpdateInput!): Faq
  updateFaqs(data: [FaqUpdateArgs!]!): [Faq]
  deleteFaq(where: FaqWhereUniqueInput!): Faq
  deleteFaqs(where: [FaqWhereUniqueInput!]!): [Faq]
  createGoal(data: GoalCreateInput!): Goal
  createGoals(data: [GoalCreateInput!]!): [Goal]
  updateGoal(where: GoalWhereUniqueInput!, data: GoalUpdateInput!): Goal
  updateGoals(data: [GoalUpdateArgs!]!): [Goal]
  deleteGoal(where: GoalWhereUniqueInput!): Goal
  deleteGoals(where: [GoalWhereUniqueInput!]!): [Goal]
  createMember(data: MemberCreateInput!): Member
  createMembers(data: [MemberCreateInput!]!): [Member]
  updateMember(where: MemberWhereUniqueInput!, data: MemberUpdateInput!): Member
  updateMembers(data: [MemberUpdateArgs!]!): [Member]
  deleteMember(where: MemberWhereUniqueInput!): Member
  deleteMembers(where: [MemberWhereUniqueInput!]!): [Member]
  createReservation(data: ReservationCreateInput!): Reservation
  createReservations(data: [ReservationCreateInput!]!): [Reservation]
  updateReservation(
    where: ReservationWhereUniqueInput!
    data: ReservationUpdateInput!
  ): Reservation
  updateReservations(data: [ReservationUpdateArgs!]!): [Reservation]
  deleteReservation(where: ReservationWhereUniqueInput!): Reservation
  deleteReservations(where: [ReservationWhereUniqueInput!]!): [Reservation]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createUsp(data: UspCreateInput!): Usp
  createUsps(data: [UspCreateInput!]!): [Usp]
  updateUsp(where: UspWhereUniqueInput!, data: UspUpdateInput!): Usp
  updateUsps(data: [UspUpdateArgs!]!): [Usp]
  deleteUsp(where: UspWhereUniqueInput!): Usp
  deleteUsps(where: [UspWhereUniqueInput!]!): [Usp]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  activities(
    where: ActivityWhereInput! = {}
    orderBy: [ActivityOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Activity!]
  activity(where: ActivityWhereUniqueInput!): Activity
  activitiesCount(where: ActivityWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  contents(
    where: ContentWhereInput! = {}
    orderBy: [ContentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Content!]
  content(where: ContentWhereUniqueInput!): Content
  contentsCount(where: ContentWhereInput! = {}): Int
  faqs(
    where: FaqWhereInput! = {}
    orderBy: [FaqOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Faq!]
  faq(where: FaqWhereUniqueInput!): Faq
  faqsCount(where: FaqWhereInput! = {}): Int
  goals(
    where: GoalWhereInput! = {}
    orderBy: [GoalOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Goal!]
  goal(where: GoalWhereUniqueInput!): Goal
  goalsCount(where: GoalWhereInput! = {}): Int
  members(
    where: MemberWhereInput! = {}
    orderBy: [MemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Member!]
  member(where: MemberWhereUniqueInput!): Member
  membersCount(where: MemberWhereInput! = {}): Int
  reservations(
    where: ReservationWhereInput! = {}
    orderBy: [ReservationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Reservation!]
  reservation(where: ReservationWhereUniqueInput!): Reservation
  reservationsCount(where: ReservationWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  usps(
    where: UspWhereInput! = {}
    orderBy: [UspOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Usp!]
  usp(where: UspWhereUniqueInput!): Usp
  uspsCount(where: UspWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
